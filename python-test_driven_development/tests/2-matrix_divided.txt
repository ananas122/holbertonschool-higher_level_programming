Importing the function from the module:
>>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Check: module docstring:
>>> m = __import__("2-matrix_divided").__doc__
>>> len(m) > 1
True

Check: function docstring:
>>> f = __import__("2-matrix_divided").matrix_divided.__doc__
>>> len(f) > 1
True

Check: passing None as matrix:
>>> matrix_divided(None, 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Check: passing None as div:
>>> matrix_divided([[1, 2, 3], [1, 2, 3]], None)
Traceback (most recent call last):
...
TypeError: div must be a number

Check: matrix as string:
>>> matrix_divided("Hello world!", 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Check: list and non-list items:
>>> matrix_divided([[1, 2, 3], "Hey"], 1)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Check: uneven matrix:
>>> matrix_divided([[1, 2, 3], [4, 5, 6, 7]], 3)
Traceback (most recent call last):
...
TypeError: Each row of the matrix must have the same size

Check: mix of ints, floats, and string type:
>>> matrix_divided([[1, "Hey", 3], [4.1, 5, 6.8]], 11)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats

Check: mix of ints, floats, and bool:
>>> matrix_divided([[0, True, 0], [False, 1, 1]], 11)
Traceback (most recent call last):
...
TypeError: matrix must be a matrix (list of lists) of integers/floats
